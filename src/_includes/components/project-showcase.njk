<section class="relative z-10 pt-16 pb-15">
    <div class="max-w-content mx-auto px-4 xs:px-5 md:px-11">
        
        {% from "macros/split-title.njk" import SplitTitle %}
        <div class="mb-12">
            {{ SplitTitle('PROJECT', 'SHOWCASE') }}
        </div>

        <div class="space-y-0" id="project-list">
            {% for project in projects.projects %}
            <div class="project-item border-t border-[#6A686C] py-6 cursor-pointer transition-colors duration-200 hover:bg-white hover:bg-opacity-5" 
                 data-project-id="{{ project.id }}"
                 data-project-company="{{ project.company }}"
                 data-project-title="{{ project.title }}"
                 data-project-description="{{ project.description }}"
                 data-project-problem="{{ project.problem }}"
                 data-project-solution="{{ project.solution }}"
                 data-project-result="{{ project.result }}"
                 data-project-role="{{ project.role }}"
                 data-project-image="{{ project.image }}"
                 data-project-narrative="{{ project.narrative }}"
                 data-project-media="{{ project.media | dump }}">
                
                <!-- Mobile Layout (below 360px) -->
                <div class="block xs:hidden">
                    <div class="flex items-center mb-4">
                        <div class="font-mono text-[14px] text-text-primary font-semibold">{{ project.company }}</div>
                    </div>
                    <div class="mb-6">
                        <div class="font-mono text-[16px] text-text-primary leading-relaxed">
                            {{ project.description }}
                        </div>
                    </div>
                    <div class="flex items-center justify-end text-text-primary">
                        <span class="font-mono text-[16px] uppercase tracking-wide mr-2">LEARN MORE</span>
                        <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                </div>

                <!-- Tablet Layout (360px to 768px) -->
                <div class="hidden xs:block md:hidden">
                    <div class="mb-4">
                        <div class="flex items-center space-x-8">
                            <div class="font-mono text-[16px] text-text-primary font-semibold">{{ project.company }}</div>
                            <div class="font-mono text-[18px] text-text-primary leading-relaxed">
                                {{ project.description }}
                            </div>
                        </div>
                    </div>
                    <div class="flex items-center justify-end text-text-primary">
                        <span class="font-mono text-[16px] uppercase tracking-wide mr-2">LEARN MORE</span>
                        <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                </div>

                <!-- Desktop Layout (768px and above) -->
                <div class="hidden md:flex md:items-center">
                    <div class="font-mono w-30 text-[16px] text-text-primary font-semibold text-center">{{ project.company }}</div>
                    <div class="flex-1 px-11">
                        <div class="font-mono text-[20px] text-text-primary leading-relaxed">
                            {{ project.description }}
                        </div>
                    </div>
                    <div class="flex items-center text-text-primary">
                        <span class="font-mono text-[16px] uppercase tracking-wide mr-2">LEARN MORE</span>
                        <img src="static/arrow.svg" class="w-3 h-3" alt="Learn more">
                    </div>
                </div>
            </div>
            {% endfor %}
            
            <!-- Final border -->
            <div class="border-t border-[#6A686C]"></div>
        </div>
    </div>
</section>

<!-- Project Detail Modal -->
<div id="project-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 opacity-0 invisible transition-all duration-300 z-50">
    <div class="bg-background-primary text-white max-w-4xl w-full max-h-[90vh] overflow-y-auto rounded-lg shadow-xl transform scale-95 transition-transform duration-300 relative">
        <!-- Modal content will be inserted here -->
    </div>
</div>

<script>
    // Project Showcase Component
    const ProjectShowcase = {
        // Store current project data
        currentProject: null,
        currentProjectIndex: -1,
        allProjects: [],
        
        // Open project modal
        openProjectModal(projectElement) {
            const project = {
                id: projectElement.dataset.projectId,
                company: projectElement.dataset.projectCompany,
                title: projectElement.dataset.projectTitle,
                description: projectElement.dataset.projectDescription,
                problem: projectElement.dataset.projectProblem,
                solution: projectElement.dataset.projectSolution,
                result: projectElement.dataset.projectResult,
                role: projectElement.dataset.projectRole,
                image: projectElement.dataset.projectImage,
                narrative: projectElement.dataset.projectNarrative,
                media: JSON.parse(projectElement.dataset.projectMedia || '[]')
            };
            
            // Initialize all projects array if not done yet
            if (this.allProjects.length === 0) {
                this.initializeProjects();
            }
            
            // Find current project index
            this.currentProjectIndex = this.allProjects.findIndex(p => p.id === project.id);
            
            // Store current project for lightbox navigation
            this.currentProject = project;
            
            const modal = document.getElementById('project-modal');
            const modalContent = modal.querySelector('.bg-background-primary');
            
            modalContent.innerHTML = this.renderModalContent(project);
            
            // Show modal with animation
            modal.classList.remove('opacity-0', 'invisible');
            modalContent.classList.remove('scale-95');
            document.body.style.overflow = 'hidden';
            
            // Show sticky navigation arrows
            this.showStickyNavigation();
        },

        // Render modal content
        renderModalContent(project) {
            return `
                <!-- Close button -->
                <button onclick="ProjectShowcase.closeProjectModal()" class="absolute top-4 right-4 text-white hover:text-gray-300 z-10 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>



                <div class="px-2 py-10 md:p-16">
                    <!-- Header -->
                    <div class="flex items-center justify-between mb-4 md:mb-16">
                        <h2 class="text-[24px] sm:text-[32px] md:text-[40px] font-bold font-helvetica uppercase">${project.title}</h2>
                        <div class="text-right">
                            <div class="text-sm font-mono">${project.company}</div>
                        </div>
                    </div>

                    <!-- Content sections for desktop/tablet -->
                    <div class="hidden md:block">
                        <div class="grid grid-cols-1 gap-8">
                            <!-- Left column -->
                            <div class="space-y-6">
                                ${this.renderContentSection('PROBLEM', project.problem)}
                                ${this.renderContentSection('SOLUTION', project.solution)}
                                ${this.renderContentSection('RESULT', project.result)}
                                ${this.renderContentSection('MY ROLE', project.role)}
                            </div>

                            <!-- Right column -->
                            <div class="flex flex-col md:flex-row items-start justify-center gap-6">
                                ${this.renderMediaGallery(project.media)}
                                <div class="text-sm leading-relaxed flex-1">
                                    <p>${project.narrative}</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Mobile layout -->
                    <div class="block md:hidden">
                        <div class="space-y-6">
                            ${this.renderContentSection('PROBLEM', project.problem, true)}
                            ${this.renderContentSection('SOLUTION', project.solution, true)}
                            ${this.renderContentSection('RESULT', project.result, true)}
                            ${this.renderContentSection('MY ROLE', project.role, true)}

                            ${this.renderMediaGallery(project.media, true)}
                            
                            <div class="text-sm leading-relaxed">
                                <p>${project.narrative}</p>
                            </div>
                        </div>
                    </div>

                    <!-- Close button -->
                    <div class="mt-8 flex justify-center">
                        <button onclick="ProjectShowcase.closeProjectModal()" class="bg-[#629FDE] text-white px-6 py-2 font-mono text-sm uppercase hover:bg-blue-600 transition-colors rounded">
                            CLOSE
                        </button>
                    </div>
                </div>
            `;
        },

        // Render content section
        renderContentSection(title, content, isMobile = false) {
            if (isMobile) {
                return `
                    <div class="border-b border-gray-700 pb-4">
                        <h3 class="text-lg font-bold mb-2 font-helvetica uppercase">${title}</h3>
                        <p class="text-sm leading-relaxed">${content}</p>
                    </div>
                `;
            }
            
            return `
                <div class="grid grid-cols-3 border-b border-gray-700 pb-4">
                    <h3 class="col-span-1 text-lg font-bold mb-2 font-helvetica uppercase">${title}</h3>
                    <p class="col-span-2 text-sm leading-relaxed">${content}</p>
                </div>
            `;
        },

        // Render media gallery
        renderMediaGallery(mediaArray, isMobile = false) {
            if (!mediaArray || mediaArray.length === 0) {
                return '';
            }

            const gridClass = isMobile ? 'grid-cols-1' : 'grid-cols-2';
            const mediaItems = mediaArray.map((media, index) => {
                if (media.type === 'video') {
                    return `
                        <div class="relative rounded-lg overflow-hidden cursor-pointer group" onclick="ProjectShowcase.openVideoPlayer('${media.src}')">
                            <video class="w-full h-48 object-cover" preload="metadata" muted>
                                <source src="${media.src}" type="video/mp4">
                            </video>
                            <div class="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center group-hover:bg-opacity-60 transition-all">
                                <svg class="w-16 h-16 text-white" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"/>
                                </svg>
                            </div>
                        </div>
                    `;
                } else {
                    return `
                        <img src="${media.src}" alt="${media.alt}" 
                             class="w-full h-48 object-cover rounded-lg cursor-pointer hover:opacity-90 transition-opacity"
                             onclick="ProjectShowcase.openLightbox('${media.src}', '${media.alt}')">
                    `;
                }
            }).join('');

            return `
                <div class="flex-1">
                    <div class="grid ${gridClass} gap-4 mb-6">
                        ${mediaItems}
                    </div>
                </div>
            `;
        },

        // Open lightbox for images
        openLightbox(src, alt) {
            const lightbox = document.getElementById('lightbox') || this.createLightbox();
            const img = lightbox.querySelector('img');
            
            // Use current project's media data
            if (this.currentProject && this.currentProject.media) {
                const images = this.currentProject.media.filter(media => media.type === 'image');
                const currentIndex = images.findIndex(image => image.src === src);
                
                lightbox.dataset.currentIndex = currentIndex;
                lightbox.dataset.imagesData = JSON.stringify(images);
                
                // Show/hide navigation arrows
                const prevBtn = lightbox.querySelector('.lightbox-prev');
                const nextBtn = lightbox.querySelector('.lightbox-next');
                
                if (prevBtn && nextBtn) {
                    prevBtn.style.display = images.length > 1 ? 'block' : 'none';
                    nextBtn.style.display = images.length > 1 ? 'block' : 'none';
                }
            }
            
            img.src = src;
            img.alt = alt;
            
            lightbox.classList.remove('opacity-0', 'invisible');
            document.body.style.overflow = 'hidden';
            
            // Hide sticky navigation while lightbox is open
            this.hideStickyNavigation();
        },

        // Open video player
        openVideoPlayer(src) {
            const videoPlayer = document.getElementById('video-player') || this.createVideoPlayer();
            
            // Check if it's a YouTube video
            if (src.includes('youtube.com/embed/')) {
                const iframe = videoPlayer.querySelector('iframe');
                const video = videoPlayer.querySelector('video');
                
                // Hide video element and show iframe
                if (video) video.style.display = 'none';
                if (iframe) {
                    iframe.style.display = 'block';
                    iframe.src = src + '?autoplay=1';
                }
            } else {
                const video = videoPlayer.querySelector('video');
                const iframe = videoPlayer.querySelector('iframe');
                
                // Hide iframe and show video
                if (iframe) iframe.style.display = 'none';
                if (video) {
                    video.style.display = 'block';
                    video.src = src;
                    video.load();
                    video.play().catch(e => console.log('Auto-play prevented:', e));
                }
            }
            
            videoPlayer.classList.remove('opacity-0', 'invisible');
            document.body.style.overflow = 'hidden';
            
            // Hide sticky navigation while video player is open
            this.hideStickyNavigation();
        },

        // Create lightbox
        createLightbox() {
            const lightbox = document.createElement('div');
            lightbox.id = 'lightbox';
            lightbox.className = 'fixed inset-0 bg-background-primary bg-opacity-90 flex items-center justify-center p-4 opacity-0 invisible transition-all duration-300 z-50';
            lightbox.innerHTML = `
                <div class="relative max-w-4xl max-h-full">
                    <img class="max-w-full max-h-full object-contain" />
                    
                    <!-- Close button -->
                    <button onclick="ProjectShowcase.closeLightbox()" class="absolute top-4 right-4 text-white hover:text-gray-300 transition-colors">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                    
                    <!-- Previous button -->
                    <button onclick="ProjectShowcase.navigateLightbox(-1)" class="lightbox-prev absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 transition-colors bg-background-primary bg-opacity-50 rounded-full p-2">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                        </svg>
                    </button>
                    
                    <!-- Next button -->
                    <button onclick="ProjectShowcase.navigateLightbox(1)" class="lightbox-next absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 transition-colors bg-background-primary bg-opacity-50 rounded-full p-2">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                        </svg>
                    </button>
                </div>
            `;
            
            lightbox.addEventListener('click', (e) => {
                if (e.target === lightbox) {
                    this.closeLightbox();
                }
            });
            
            document.body.appendChild(lightbox);
            return lightbox;
        },

        // Create video player
        createVideoPlayer() {
            const videoPlayer = document.createElement('div');
            videoPlayer.id = 'video-player';
            videoPlayer.className = 'fixed inset-0 bg-background-primary bg-opacity-90 flex items-center justify-center p-4 opacity-0 invisible transition-all duration-300 z-50';
            videoPlayer.innerHTML = `
                <div class="relative max-w-4xl max-h-full">
                    <video class="max-w-full max-h-full" controls autoplay>
                        <source type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    <iframe class="w-full h-full min-h-[400px] md:min-h-[500px] lg:min-h-[600px]" style="display: none; aspect-ratio: 16/9;" 
                            frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                            allowfullscreen></iframe>
                    <button onclick="ProjectShowcase.closeVideoPlayer()" class="absolute top-4 right-4 text-white hover:text-gray-300 transition-colors z-10">
                        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
            `;
            
            videoPlayer.addEventListener('click', (e) => {
                if (e.target === videoPlayer) {
                    this.closeVideoPlayer();
                }
            });
            
            document.body.appendChild(videoPlayer);
            return videoPlayer;
        },

        // Navigate lightbox (previous/next images)
        navigateLightbox(direction) {
            const lightbox = document.getElementById('lightbox');
            if (!lightbox) return;
            
            const currentIndex = parseInt(lightbox.dataset.currentIndex);
            const imagesData = JSON.parse(lightbox.dataset.imagesData || '[]');
            
            if (imagesData.length <= 1) return;
            
            let newIndex = currentIndex + direction;
            
            // Loop around if at beginning/end
            if (newIndex < 0) {
                newIndex = imagesData.length - 1;
            } else if (newIndex >= imagesData.length) {
                newIndex = 0;
            }
            
            // Update image
            const img = lightbox.querySelector('img');
            const newImage = imagesData[newIndex];
            
            img.src = newImage.src;
            img.alt = newImage.alt;
            
            // Update current index
            lightbox.dataset.currentIndex = newIndex;
        },

        // Close lightbox
        closeLightbox() {
            const lightbox = document.getElementById('lightbox');
            if (lightbox) {
                lightbox.classList.add('opacity-0', 'invisible');
                document.body.style.overflow = 'auto';
                
                // Restore sticky navigation when lightbox closes
                this.showStickyNavigation();
            }
        },

        // Close video player
        closeVideoPlayer() {
            const videoPlayer = document.getElementById('video-player');
            if (videoPlayer) {
                const video = videoPlayer.querySelector('video');
                const iframe = videoPlayer.querySelector('iframe');
                
                // Stop video playback
                if (video && video.style.display !== 'none') {
                    video.pause();
                    video.currentTime = 0;
                }
                
                // Stop iframe playback by clearing src
                if (iframe && iframe.style.display !== 'none') {
                    iframe.src = '';
                }
                
                videoPlayer.classList.add('opacity-0', 'invisible');
                document.body.style.overflow = 'auto';
                
                // Restore sticky navigation when video player closes
                this.showStickyNavigation();
            }
        },

        // Close project modal
        closeProjectModal() {
            const modal = document.getElementById('project-modal');
            const modalContent = modal.querySelector('.bg-background-primary');
            
            modal.classList.add('opacity-0', 'invisible');
            modalContent.classList.add('scale-95');
            document.body.style.overflow = 'auto';
            
            // Hide sticky navigation arrows
            this.hideStickyNavigation();
            
            // Clear current project data
            this.currentProject = null;
            this.currentProjectIndex = -1;
        },

        // Initialize projects array from DOM
        initializeProjects() {
            const projectElements = document.querySelectorAll('.project-item[data-project-id]');
            this.allProjects = Array.from(projectElements).map(element => ({
                id: element.dataset.projectId,
                company: element.dataset.projectCompany,
                title: element.dataset.projectTitle,
                description: element.dataset.projectDescription,
                problem: element.dataset.projectProblem,
                solution: element.dataset.projectSolution,
                result: element.dataset.projectResult,
                role: element.dataset.projectRole,
                image: element.dataset.projectImage,
                narrative: element.dataset.projectNarrative,
                media: JSON.parse(element.dataset.projectMedia || '[]'),
                element: element
            }));
        },

        // Navigate to previous project
        navigateToPreviousProject() {
            if (this.allProjects.length <= 1) return;
            
            let newIndex = this.currentProjectIndex - 1;
            if (newIndex < 0) {
                newIndex = this.allProjects.length - 1;
            }
            
            this.switchToProject(newIndex);
        },

        // Navigate to next project
        navigateToNextProject() {
            if (this.allProjects.length <= 1) return;
            
            let newIndex = this.currentProjectIndex + 1;
            if (newIndex >= this.allProjects.length) {
                newIndex = 0;
            }
            
            this.switchToProject(newIndex);
        },

        // Switch to project by index
        switchToProject(newIndex) {
            if (newIndex < 0 || newIndex >= this.allProjects.length) return;
            
            const newProject = this.allProjects[newIndex];
            this.currentProject = newProject;
            this.currentProjectIndex = newIndex;
            
            // Update modal content
            const modal = document.getElementById('project-modal');
            const modalContent = modal.querySelector('.bg-background-primary');
            modalContent.innerHTML = this.renderModalContent(newProject);
            
            // Scroll modal content to top with smooth animation
            modalContent.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
            
            // Update sticky navigation visibility
            this.updateStickyNavigation();
        },

        // Show sticky navigation arrows
        showStickyNavigation() {
            this.hideStickyNavigation(); // Remove any existing arrows first
            
            if (this.allProjects.length > 1) {
                // Create previous arrow
                const prevArrow = document.createElement('button');
                prevArrow.id = 'sticky-prev-arrow';
                prevArrow.className = 'fixed left-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 transition-colors bg-background-primary bg-opacity-70 hover:bg-opacity-90 rounded-full p-3 z-50 shadow-lg';
                prevArrow.innerHTML = `
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                    </svg>
                `;
                prevArrow.onclick = () => this.navigateToPreviousProject();
                
                // Create next arrow
                const nextArrow = document.createElement('button');
                nextArrow.id = 'sticky-next-arrow';
                nextArrow.className = 'fixed right-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 transition-colors bg-background-primary bg-opacity-70 hover:bg-opacity-90 rounded-full p-3 z-50 shadow-lg';
                nextArrow.innerHTML = `
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                `;
                nextArrow.onclick = () => this.navigateToNextProject();
                
                document.body.appendChild(prevArrow);
                document.body.appendChild(nextArrow);
            }
        },

        // Hide sticky navigation arrows
        hideStickyNavigation() {
            const prevArrow = document.getElementById('sticky-prev-arrow');
            const nextArrow = document.getElementById('sticky-next-arrow');
            
            if (prevArrow) prevArrow.remove();
            if (nextArrow) nextArrow.remove();
        },

        // Update sticky navigation visibility
        updateStickyNavigation() {
            if (this.allProjects.length > 1) {
                this.showStickyNavigation();
            } else {
                this.hideStickyNavigation();
            }
        },

        // Setup event listeners
        setupEventListeners() {
            // Add click handlers to project items
            document.addEventListener('click', (e) => {
                const projectItem = e.target.closest('.project-item');
                if (projectItem) {
                    this.openProjectModal(projectItem);
                }
            });

            // Close modal when clicking outside
            document.getElementById('project-modal').addEventListener('click', (e) => {
                if (e.target === e.currentTarget) {
                    this.closeProjectModal();
                }
            });

            // Handle keyboard navigation
            document.addEventListener('keydown', (e) => {
                const lightbox = document.getElementById('lightbox');
                const videoPlayer = document.getElementById('video-player');
                const projectModal = document.getElementById('project-modal');
                
                if (e.key === 'Escape') {
                    // Check what's currently open and close it
                    if (lightbox && !lightbox.classList.contains('invisible')) {
                        this.closeLightbox();
                    } else if (videoPlayer && !videoPlayer.classList.contains('invisible')) {
                        this.closeVideoPlayer();
                    } else if (projectModal && !projectModal.classList.contains('invisible')) {
                        this.closeProjectModal();
                    }
                } else if (lightbox && !lightbox.classList.contains('invisible')) {
                    // Navigate lightbox with arrow keys
                    if (e.key === 'ArrowLeft') {
                        this.navigateLightbox(-1);
                    } else if (e.key === 'ArrowRight') {
                        this.navigateLightbox(1);
                    }
                } else if (projectModal && !projectModal.classList.contains('invisible') && 
                          (!videoPlayer || videoPlayer.classList.contains('invisible'))) {
                    // Navigate between projects with arrow keys when modal is open but lightbox/video is not
                    if (e.key === 'ArrowLeft') {
                        this.navigateToPreviousProject();
                    } else if (e.key === 'ArrowRight') {
                        this.navigateToNextProject();
                    }
                }
            });
        }
    };

    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
        ProjectShowcase.setupEventListeners();
    });
</script>