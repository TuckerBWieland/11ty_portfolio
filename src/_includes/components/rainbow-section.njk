{# components/rainbow-section.njk #}
<div class="rainbow-section" id="rainbow-section">
    <div class="rainbow-container">
      <div class="rainbow-background"></div>
      <div class="black-overlay" id="black-overlay"></div>
    </div>
  </div>
</div>
  
  <style>
  /* Rainbow Section Styles */
  .rainbow-section {
      height: 200vh; /* Extra height for scroll control */
      position: relative;
      overflow: hidden;
  }
  
  .rainbow-container {
      position: sticky;
      top: 0;
      width: 100%;
      height: 100vh;
      overflow: hidden;
  }
  
  .rainbow-background {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(to right,
        #629FDE 0%,
        #629FDE 17%,
        #E4C555 17%,
        #E4C555 37%,
        #27AE60 37%,
        #27AE60 50%,
        #FF3333 50%,
        #FF3333 68%,
        #F45CB3 68%,
        #F45CB3 79%,
        #27AE60 79%,
        #27AE60 83%,
        #F87C46 83%,
        #F87C46 100%
      );
  }
  
  .black-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at center, transparent 10px, #000 11px);
      z-index: 2;
  }
  </style>
  
  <script>
  window.addEventListener('load', function() {
      if (typeof gsap === 'undefined' || typeof ScrollTrigger === 'undefined') {
          console.error('GSAP or ScrollTrigger not loaded');
          return;
      }
      
      gsap.registerPlugin(ScrollTrigger);
      
      const rainbowSection = document.getElementById('rainbow-section');
      const blackOverlay = document.getElementById('black-overlay');
      
      if (!rainbowSection || !blackOverlay) {
          console.error('Rainbow elements not found');
          return;
      }
      
      // Pin the rainbow container while animating the circle
      ScrollTrigger.create({
          trigger: rainbowSection,
          start: "top top",
          end: "bottom bottom",
          pin: ".rainbow-container",
          pinSpacing: false,
          scrub: 1,
          onUpdate: function(self) {
              const progress = self.progress;
              
              // Calculate circle size
              const minSize = 0;
              const maxSize = Math.max(window.innerWidth, window.innerHeight) * 1.5;
              const currentSize = minSize + (progress * (maxSize - minSize));
              
              // Update the circle
              blackOverlay.style.background = `radial-gradient(circle at center, transparent ${currentSize}px, #000 ${currentSize + 2}px)`;
              
              console.log(`Progress: ${(progress * 100).toFixed(1)}% - Circle: ${currentSize.toFixed(0)}px`);
          }
      });
  });
  </script>