<!-- Worked With Section - Clean, Modern Implementation -->
<section class="bg-background-primary py-32" id="worked-with">
  <div class="max-w-content mx-auto px-4 xs:px-5 md:px-11">
    
    {% from "macros/split-title.njk" import SplitTitle %}
    <!-- Section Title -->
    <div class="mb-16 lg:mb-24">
      {{ SplitTitle('WORKED', 'WITH') }}
    </div>

    <!-- Companies Grid -->
    <div class="company-grid mb-12">
      {% for company in companies.companies %}
      <div class="company-item" data-company="{{ company.name }}" data-company-id="{{ company.id }}">
        <!-- Single logo with CSS-based color change -->
        <img 
          src="{{ company.logo }}" 
          alt="{{ company.name }} logo"
          class="company-logo"
          loading="lazy"
        />
      </div>
      {% endfor %}
    </div>

    <!-- Tooltip for company details -->
    <div id="company-tooltip" class="company-tooltip">
      <div class="tooltip-arrow"></div>
      <div class="tooltip-content">
        <h3 id="tooltip-company-name" class="tooltip-company-name"></h3>
        <p id="tooltip-company-description" class="tooltip-company-description"></p>
      </div>
    </div>



  </div>
</section>

<!-- Scoped CSS for the component -->
<style>
/* Company Grid Layout */
.company-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  justify-items: center;
  align-items: center;
  gap: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

/* Desktop: 4 columns with centered incomplete rows */
/* First 4 items fill first row normally */
/* Items 5-6 center themselves in the second row */
.company-item:nth-child(5) { 
  grid-column: 2; /* Second column */
}

.company-item:nth-child(6) { 
  grid-column: 3; /* Third column */
}

/* Mobile: 2 columns with centered incomplete rows */
@media (max-width: 768px) {
  .company-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
    max-width: 400px;
  }
  
  /* Reset desktop positioning */
  .company-item:nth-child(5),
  .company-item:nth-child(6) { 
    grid-column: auto;
  }
  
  /* Center odd item (if any) in the last row */
  .company-item:nth-last-child(1):nth-child(odd) {
    grid-column: 1 / -1;
    justify-self: center;
  }
}

@media (max-width: 480px) {
  .company-grid {
    gap: 1rem;
    max-width: 320px;
  }
}

/* Company Item Styling */
.company-item {
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  height: 80px;
  width: 100%;
  max-width: 200px;
}

.company-item:hover {
  transform: translateY(-4px) scale(1.05);
}

.company-logo {
  height: 80px;
  width: auto;
  max-width: 200px;
  object-fit: contain;
  transition: all 0.3s ease;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* Default white SVG fill */
  filter: brightness(0) invert(1);
}

/* Accent color cycling - each company gets a different color on hover */
.company-item:nth-child(1):hover .company-logo {
  /* Orange #f87c46 */
  filter: brightness(0) saturate(100%) invert(64%) sepia(77%) saturate(2647%) hue-rotate(342deg) brightness(101%) contrast(95%);
}

.company-item:nth-child(2):hover .company-logo {
  /* Blue #629fde */
  filter: brightness(0) saturate(100%) invert(60%) sepia(65%) saturate(4049%) hue-rotate(200deg) brightness(94%) contrast(86%);
}

.company-item:nth-child(3):hover .company-logo {
  /* Pink #f45cb3 */
  filter: brightness(0) saturate(100%) invert(58%) sepia(88%) saturate(5084%) hue-rotate(295deg) brightness(96%) contrast(89%);
}

.company-item:nth-child(4):hover .company-logo {
  /* Green #27ae60 */
  filter: brightness(0) saturate(100%) invert(52%) sepia(98%) saturate(1417%) hue-rotate(108deg) brightness(97%) contrast(86%);
}

.company-item:nth-child(5):hover .company-logo {
  /* Orange #f87c46 - cycle back to start */
  filter: brightness(0) saturate(100%) invert(64%) sepia(77%) saturate(2647%) hue-rotate(342deg) brightness(101%) contrast(95%);
}

.company-item:nth-child(6):hover .company-logo {
  /* Blue #629fde */
  filter: brightness(0) saturate(100%) invert(60%) sepia(65%) saturate(4049%) hue-rotate(200deg) brightness(94%) contrast(86%);
}

/* Force hover state for click-opened tooltips */
.company-item.force-hover:nth-child(1) .company-logo {
  /* Orange #f87c46 */
  filter: brightness(0) saturate(100%) invert(64%) sepia(77%) saturate(2647%) hue-rotate(342deg) brightness(101%) contrast(95%);
}

.company-item.force-hover:nth-child(2) .company-logo {
  /* Blue #629fde */
  filter: brightness(0) saturate(100%) invert(60%) sepia(65%) saturate(4049%) hue-rotate(200deg) brightness(94%) contrast(86%);
}

.company-item.force-hover:nth-child(3) .company-logo {
  /* Pink #f45cb3 */
  filter: brightness(0) saturate(100%) invert(58%) sepia(88%) saturate(5084%) hue-rotate(295deg) brightness(96%) contrast(89%);
}

.company-item.force-hover:nth-child(4) .company-logo {
  /* Green #27ae60 */
  filter: brightness(0) saturate(100%) invert(52%) sepia(98%) saturate(1417%) hue-rotate(108deg) brightness(97%) contrast(86%);
}

.company-item.force-hover:nth-child(5) .company-logo {
  /* Orange #f87c46 - cycle back to start */
  filter: brightness(0) saturate(100%) invert(64%) sepia(77%) saturate(2647%) hue-rotate(342deg) brightness(101%) contrast(95%);
}

.company-item.force-hover:nth-child(6) .company-logo {
  /* Blue #629fde */
  filter: brightness(0) saturate(100%) invert(60%) sepia(65%) saturate(4049%) hue-rotate(200deg) brightness(94%) contrast(86%);
}

@media (max-width: 768px) {
  .company-item {
    height: 70px;
    width: 100%;
    max-width: 180px;
  }
  
  .company-logo {
    height: 70px;
    max-width: 180px;
  }
}

@media (max-width: 480px) {
  .company-item {
    height: 60px;
    width: 100%;
    max-width: 140px;
  }
  
  .company-logo {
    height: 60px;
    max-width: 140px;
  }
}

/* Tooltip Styling */
.company-tooltip {
  position: fixed;
  z-index: 9999;
  background-color: #629fde; /* Blue accent color */
  border: 1px solid rgba(255, 255, 255, 0.3);
  border-radius: 8px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
  padding: 0;
  max-width: 320px;
  opacity: 0;
  visibility: hidden;
  transform: translateY(10px);
  transition: all 0.3s ease;
  pointer-events: none;
}

.company-tooltip.show {
  opacity: 1 !important;
  visibility: visible !important;
  transform: translateY(0) !important;
  pointer-events: auto;
}

.tooltip-arrow {
  position: absolute;
  top: -6px;
  left: 50%;
  transform: translateX(-50%);
  width: 12px;
  height: 12px;
  background-color: #2C2931;
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-bottom: none;
  border-right: none;
  transform: translateX(-50%) rotate(45deg);
}

.tooltip-content {
  padding: 16px 20px;
}

.tooltip-company-name {
  font-family: 'IBM Plex Mono', monospace;
  font-size: 0.875rem;
  font-weight: 600;
  color: #ffffff;
  margin: 0 0 8px 0;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  line-height: 1.2;
}

.tooltip-company-description {
  font-family: 'IBM Plex Mono', monospace;
  font-size: 0.75rem;
  font-weight: 500;
  color: rgba(255, 255, 255, 0.8);
  line-height: 1.4;
  margin: 0;
}

@media (max-width: 640px) {
  .company-tooltip {
    max-width: 280px;
  }
  
  .tooltip-content {
    padding: 12px 16px;
  }
  
  .tooltip-company-name {
    font-size: 0.75rem;
  }
  
  .tooltip-company-description {
    font-size: 0.6875rem;
    line-height: 1.3;
  }
}

/* Animation for scroll-in effect */
.company-item {
  opacity: 0;
  transform: translateY(20px);
  animation: fadeInUp 0.6s ease forwards;
}

.company-item:nth-child(1) { animation-delay: 0.1s; }
.company-item:nth-child(2) { animation-delay: 0.2s; }
.company-item:nth-child(3) { animation-delay: 0.3s; }
.company-item:nth-child(4) { animation-delay: 0.4s; }
.company-item:nth-child(5) { animation-delay: 0.5s; }
.company-item:nth-child(6) { animation-delay: 0.6s; }

@keyframes fadeInUp {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Respect reduced motion preference */
@media (prefers-reduced-motion: reduce) {
  .company-item {
    animation: none;
    opacity: 1;
    transform: none;
  }
  
  .company-item,
  .company-logo {
    transition: none;
  }
}
</style>

<!-- JavaScript for tooltip functionality -->
<script>
(function() {
  'use strict';
  
  // Company descriptions
  const companyDescriptions = {
    'shopify': "Lead marketer and operations focused on building trust and engagement with global developer audiences.",
    'justworks': "Directed marketing strategy and operations, with emphasis on corporate and go-to-market operations.",
    'loreal': "Crafted marketing assessments and training to identify skill gaps and implement initiatives across a large organization.",
    'ups': "Completed 170 go-to-market assessments for small- and medium-sized businesses nationwide.",
    'general-assembly': "Product Manager for enterprise learning products sold to Fortune 500 companies to reskill employee workforces.",
    'billion-oyster': "Volunteer as a community scientistâ€”collecting water samples and building data visualizations to make environmental data more accessible."
  };

  // Tooltip elements
  const tooltip = document.getElementById('company-tooltip');
  const tooltipName = document.getElementById('tooltip-company-name');
  const tooltipDescription = document.getElementById('tooltip-company-description');
  
  // Company items
  const companyItems = document.querySelectorAll('.company-item');
  
  // Early exit if essential elements are missing
  if (!tooltip || !tooltipName || !tooltipDescription || companyItems.length === 0) {
    console.error('Essential tooltip elements not found, aborting script');
    return;
  }
  
  let tooltipTimeout;
  let isClickOpen = false;
  let currentClickedItem = null;
  
  // Function to position tooltip relative to the hovered element
  function positionTooltip(element) {
    const rect = element.getBoundingClientRect();
    
    // Calculate position relative to the viewport
    let left = rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2);
    let top = rect.bottom + 12; // 12px gap below the logo
    
    // Ensure tooltip doesn't go off-screen horizontally
    const padding = 16;
    if (left < padding) {
      left = padding;
    } else if (left + tooltip.offsetWidth > window.innerWidth - padding) {
      left = window.innerWidth - tooltip.offsetWidth - padding;
    }
    
    // Ensure tooltip doesn't go off-screen vertically
    if (top + tooltip.offsetHeight > window.innerHeight - padding) {
      top = rect.top - tooltip.offsetHeight - 12; // Show above instead
    }
    
    tooltip.style.left = left + 'px';
    tooltip.style.top = top + 'px';
  }
  
  // Function to show tooltip
  function showTooltip(item) {
    const companyName = item.getAttribute('data-company');
    const companyId = item.getAttribute('data-company-id');
    
    tooltipName.textContent = companyName;
    tooltipDescription.textContent = companyDescriptions[companyId] || 'Information not available.';
    
    positionTooltip(item);
    tooltip.classList.add('show');
  }
  
  // Function to hide tooltip
  function hideTooltip() {
    tooltip.classList.remove('show');
    
    // Reset hover state on the currently clicked item when tooltip transition ends
    if (currentClickedItem) {
      const itemToReset = currentClickedItem;
      
      // Listen for the tooltip's transition to complete, then reset logo color
      const handleTransitionEnd = (e) => {
        if (e.target === tooltip && e.propertyName === 'opacity') {
          itemToReset.classList.remove('force-hover');
          tooltip.removeEventListener('transitionend', handleTransitionEnd);
        }
      };
      
      tooltip.addEventListener('transitionend', handleTransitionEnd);
    }
    
    isClickOpen = false;
    currentClickedItem = null;
  }
  
  // Show tooltip on hover and click
  companyItems.forEach(item => {
    // Click functionality
    item.addEventListener('click', function(e) {
      e.preventDefault();
      clearTimeout(tooltipTimeout);
      
      // If clicking the same item that's already open, close it
      if (isClickOpen && currentClickedItem === this) {
        hideTooltip();
        return;
      }
      
      // Otherwise show tooltip and mark as click-opened
      
      // Remove force-hover from any previous item
      if (currentClickedItem) {
        currentClickedItem.classList.remove('force-hover');
      }
      
      isClickOpen = true;
      currentClickedItem = this;
      this.classList.add('force-hover');
      showTooltip(this);
    });
    
    // Hover functionality (only if not click-opened)
    item.addEventListener('mouseenter', function() {
      if (!isClickOpen) {
        clearTimeout(tooltipTimeout);
        showTooltip(this);
      }
    });
    
    item.addEventListener('mouseleave', function() {
      if (!isClickOpen) {
        tooltipTimeout = setTimeout(() => {
          tooltip.classList.remove('show');
        }, 150); // Small delay to prevent flickering
      }
    });
  });
  
  // Hide tooltip when mouse leaves tooltip area (only for hover-opened tooltips)
  tooltip.addEventListener('mouseenter', function() {
    if (!isClickOpen) {
      clearTimeout(tooltipTimeout);
    }
  });
  
  tooltip.addEventListener('mouseleave', function() {
    if (!isClickOpen) {
      tooltip.classList.remove('show');
    }
  });
  
  // Click outside to dismiss (only for click-opened tooltips)
  document.addEventListener('click', function(e) {
    if (isClickOpen && 
        !tooltip.contains(e.target) && 
        !e.target.closest('.company-item')) {
      hideTooltip();
    }
  });
  
  // Hide tooltip on scroll
  window.addEventListener('scroll', function() {
    hideTooltip();
  });
  
  // Hide tooltip on window resize
  window.addEventListener('resize', function() {
    hideTooltip();
  });
  
  // Hide tooltip with Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && isClickOpen) {
      hideTooltip();
    }
  });

  // Intersection Observer for scroll-triggered animations
  if ('IntersectionObserver' in window) {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '-50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
        }
      });
    }, observerOptions);

    // Observe the grid container
    const grid = document.querySelector('.company-grid');
    if (grid) {
      observer.observe(grid);
    }
  }
})();
</script>